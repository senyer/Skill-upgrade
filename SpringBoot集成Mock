## 前言

基于Postman等工具来进行web应用的Rest接口测试，一般不利于CI，测试条件多一些。 而Mock可以帮助后端开发人员，直接再单元测试模块直接进行接口的测试。实现自检与CI，提高效率。

## 前提条件

基于SpringBoot2.0+ 实现Mock的集成测试。

1. 引入相关测试POM包

``` xml
<dependency>
     <groupId>org.springframework.boot</groupId>
     <artifactId>spring-boot-starter-test</artifactId>
     <scope>test</scope>
</dependency>
```

2. 在测试类引入以下注解

``` java
@RunWith(SpringRunner.class) //使用SpringRunner来运行
@SpringBootTest	//SpringBoot用于测试的注解
@AutoConfigureMockMvc //用于自动配置MockMvc
public class MockXXXTest{
    
}
```

### 基本思路

使用MockMvc模拟发起请求，然后执行相应的代码，在执行的过程中使用Mockito的mock模拟底层数据的返回，最后结果验证。

### 使用MockBean模拟相应的对象

主要作用： 使用Mock对象代替原来的Spring的bean，然后模拟底层数据的返回，而不是调用原本真正的实现。

用法：

* 增加@MockBean注解

``` java
public class MockXXXTest {
    @MockBean
    private XXXDao xxxtDao;
 

}
```

* 然后Stub打桩

``` java
Mockito.when(
        xxxDao.findMapBySql(
                Mockito.anyString(),Mockito.anyList()
        )
 ).thenReturn(dataList);
```



这里的`when(…).thenReturn(…)`表示的是：当定义(when)对象、方法和参数（输入），然后(thenReturn) 中返回结果（输出）。默认情况下，所有的函数都有返回值。mock函数默认返回的是null，一个空的集合或者一个被对象类型包装的内置类型，例如：0、false对应的对象类型为Integer、Boolean。

 这里值得**注意**的是：方法中使用的参数可以使用参数匹配器，如：`Mockito.anyString(),Mockito.anyList()`，**当其中有一个参数使用了参数匹配器，其实的所有参数也需要使用参数匹配器**，否则会出现异常。

* 然后使用MockMvc发送请求

主要作用： 使用MockMvc发起一个请求，然后进行验证规则、进一步处理返回结果。

``` java
//配置MockMvc
@Autowired
protected MockMvc mockMvc;
@Test
public void TestXXX() throws Exception {
       MvcResult result = mockMvc.perform(
                MockMvcRequestBuilders.get("/xxxController/xxx_query")
                        .contentType(MediaType.APPLICATION_JSON_UTF8)      
                        .param("xxx","xxx")
                    

        )
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andDo(MockMvcResultHandlers.print())
                .andReturn();
       
    }
｝
```

1. `.perform()` 执行一个MockMvcRequestBuilders请求。其中`.get()`表示发送get请求（可以使用get、post、put、delete等）；`.contentType()`设置编码格式；`.param()`请求参数,可以带多个。

2. `andExpect()`添加 MockMvcResultMatchers验证规则，验证执行结果是否正确。

3. `.andDo()`添加 MockMvcResultHandlers结果处理器,这是可以用于打印结果输出。

4. `.andReturn()`结果返回回，然后可以进行下一步的处理。  

   ### 完整用例

   ``` java
   @RunWith(SpringRunner.class)
   @SpringBootTest
   @AutoConfigureMockMvc
   public class MockXXXTest {
       @Autowired
       protected MockMvc mockMvc;
       @MockBean
       private XXXDao xxxtDao;
       @Test
       public void TestXXX() throws Exception {
           List<Map<String,Object>> dataList= new ArrayList<>();
           Map m=new HashMap();
           m.put("name","test");
           dataList.add(m);
           Mockito.when(xxxDao.findMapBySql(Mockito.anyString(),Mockito.anyList())).thenReturn(dataList);
   
           Mockito.when(xxxDao.findTotalCountBySql(Mockito.anyString(),Mockito.any())).thenReturn((long)1);
        
           MvcResult result = mockMvc.perform(
                   MockMvcRequestBuilders.get("/xxxController/xxx_query")
                           .contentType(MediaType.APPLICATION_JSON_UTF8)      
                           .param("xxx","xxx")
                       
   
           )
                   .andExpect(MockMvcResultMatchers.status().isOk())
                   .andDo(MockMvcResultHandlers.print())
                   .andReturn();
           System.out.println(result);
       }
   }
   ```

   ### 方法说明

   | 方法                              | 说明                                                         |
   | --------------------------------- | :----------------------------------------------------------- |
   | mockMvc.perform                   | 执行一个请求                                                 |
   | MockMvcRequestBuilders.get("XXX") | 构造一个请求                                                 |
   | ResultActions.param               | 添加请求传值                                                 |
   | ResultActions.accept())           | 执行一个请求 如MediaType.TEXT_HTML_VALUE                     |
   | ResultActions.andExpect           | 添加执行完成后的断言。 等同于 `Assert.assertEquals`          |
   | ResultActions.andDo               | 添加一个结果处理器，表示要对结果做点什么事情，比如此处使用MockMvcResultHandlers.print()输出整个响应结果信息 |
   | ResultActions.andReturn           | 表示执行完成后返回相应的结果。                               |



### API清单

#### RequestBuilder/MockMvcRequestBuilders：

![image-20200615161816806](C:\Users\t30005136\AppData\Roaming\Typora\typora-user-images\image-20200615161816806.png)

#### MockHttpServletRequestBuilder

![image-20200615161908416](C:\Users\t30005136\AppData\Roaming\Typora\typora-user-images\image-20200615161908416.png)

#### MockMultipartHttpServletRequestBuilder

![image-20200615162013542](C:\Users\t30005136\AppData\Roaming\Typora\typora-user-images\image-20200615162013542.png)

#### ResultActions

![image-20200615162036335](C:\Users\t30005136\AppData\Roaming\Typora\typora-user-images\image-20200615162036335.png)

#### ResultMatcher/MockMvcResultMatchers

![image-20200615162119665](C:\Users\t30005136\AppData\Roaming\Typora\typora-user-images\image-20200615162119665.png)



### 常用的测试用例

#### 测试普通控制器

``` java
mockMvc.perform(get("/user/{id}", 1)) //执行请求  
            .andExpect(model().attributeExists("user")) //验证存储模型数据  
            .andExpect(view().name("user/view")) //验证viewName  
            .andExpect(forwardedUrl("/WEB-INF/jsp/user/view.jsp"))//验证视图渲染时forward到的jsp  
            .andExpect(status().isOk())//验证状态码  
            .andDo(print()); //输出MvcResult到控制台
```

#### 得到MvcResult自定义验证

``` java
MvcResult result = mockMvc.perform(get("/user/{id}", 1))//执行请求  
        .andReturn(); //返回MvcResult  
Assert.assertNotNull(result.getModelAndView().getModel().get("user")); //自定义断言 

```

#### 验证请求参数绑定到模型以及Flash属性

``` java
mockMvc.perform(post("/user").param("name", "zhang")) //执行传递参数的POST请求(也可以post("/user?name=zhang"))  
            .andExpect(handler().handlerType(UserController.class)) //验证执行的控制器类型  
            .andExpect(handler().methodName("create")) //验证执行的控制器方法名  
            .andExpect(model().hasNoErrors()) //验证页面没有错误  
            .andExpect(flash().attributeExists("success")) //验证存在flash属性  
            .andExpect(view().name("redirect:/user")); //验证视图

```

#### 文件上传

``` java
mbyte[] bytes = new byte[] {1, 2};  
mockMvc.perform(fileUpload("/user/{id}/icon", 1L).file("icon", bytes)) //执行文件上传  
        .andExpect(model().attribute("icon", bytes)) //验证属性相等性  
        .andExpect(view().name("success")); //验证视图 

```

#### JSON请求/响应验证

``` java
String requestBody = "{\"id\":1, \"name\":\"zhang\"}";  
    mockMvc.perform(post("/user")  
            .contentType(MediaType.APPLICATION_JSON).content(requestBody)  
            .accept(MediaType.APPLICATION_JSON)) //执行请求  
            .andExpect(content().contentType(MediaType.APPLICATION_JSON)) //验证响应contentType  
            .andExpect(jsonPath("$.id").value(1)); //使用Json path验证JSON 请参考http://goessner.net/articles/JsonPath/  
      
    String errorBody = "{id:1, name:zhang}";  
    MvcResult result = mockMvc.perform(post("/user")  
            .contentType(MediaType.APPLICATION_JSON).content(errorBody)  
            .accept(MediaType.APPLICATION_JSON)) //执行请求  
            .andExpect(status().isBadRequest()) //400错误请求  
            .andReturn();  
      
    Assert.assertTrue(HttpMessageNotReadableException.class.isAssignableFrom(result.getResolvedException().getClass()));//错误的请求内容体


```

#### 异步测试

``` java
//Callable  
    MvcResult result = mockMvc.perform(get("/user/async1?id=1&name=zhang")) //执行请求  
            .andExpect(request().asyncStarted())  
            .andExpect(request().asyncResult(CoreMatchers.instanceOf(User.class))) //默认会等10秒超时  
            .andReturn();  
      
    mockMvc.perform(asyncDispatch(result))  
            .andExpect(status().isOk())  
            .andExpect(content().contentType(MediaType.APPLICATION_JSON))  
            .andExpect(jsonPath("$.id").value(1));  

```

#### 可以做全局配置

``` java
mockMvc = webAppContextSetup(wac)  
            .defaultRequest(get("/user/1").requestAttr("default", true)) //默认请求 如果其是Mergeable类型的，会自动合并的哦mockMvc.perform中的RequestBuilder  
            .alwaysDo(print())  //默认每次执行请求后都做的动作  
            .alwaysExpect(request().attribute("default", true)) //默认每次执行后进行验证的断言  
            .build();  
      
    mockMvc.perform(get("/user/1"))  
            .andExpect(model().attributeExists("user"));

```





